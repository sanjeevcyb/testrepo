<?php

/**
 * @file
 * Module for customization of media foundry live events.
 */
define("ACCESS_MEDIA_SETTINGS", "administer media settings");

/**
 * Implements hook_init().
 * Implements code to restrict video access in Publisher domain for anonymous user
 */
function media_foundry_live_event_init() {
			
}

/**
 * Implements hook_permission().
 */
function media_foundry_live_event_permission() {
  return array(
      ACCESS_MEDIA_SETTINGS => array(
          'title' => t('administer media settings'),
          'description' => t('Allow user to administer media related settings for live and VOD')
      )
  );
}

/**
 * Implements hook_node_view().
 */
function media_foundry_live_event_node_view($node, $view_mode, $langcode) {


  if($node->type == "live_event" && $view_mode == 'full') {

    // Code to add "Add to product link" on event detail page.
    $res = db_query("SELECT count(product_id) as cnt FROM commerce_product P left join field_data_field_premium_node N on P.product_id = N.entity_id
		  WHERE field_premium_node_nid = ".$node->nid);
    $row = $res->fetchAssoc();
    $productcnt = $row['cnt'];
    if($productcnt<=0) {
      _add_product_link($node);
    }
  }

  if($node->type == "video" && $view_mode == 'full') {

     // Code to add "Add to product link" on video detail page.
    _add_product_link($node);

  }
}

function _add_product_link($node) {
  global $user;

  if($node->field_add_to_subscription['und'][0]['value'] == 2)
  {
	 /* if($node->nid) {
		  $res = db_query("SELECT count(product_id) as cnt FROM commerce_product P left join field_data_field_premium_node N on P.product_id = N.entity_id
		  WHERE field_premium_node_nid = ".$node->nid);
		  $row = $res->fetchAssoc();
		  $productcnt = $row['cnt'];
		  if($productcnt) {
		    $showlink = false;
	      }
	      else {
	        $showlink = true;
	      }
	  } */
 	 if(user_access("create commerce_product entities")) {
        $node->content['extra_link'] = array(
          '#weight' => -1,
          '#theme' => 'link',
          '#path' => 'admin/commerce/products/add/product/'.$node->nid,
          '#text' => t('Create Subscription'),
          "#prefix" => "<div class='not-product-created'>",
          '#suffix' => "</div>",
          '#options' => array(
              'attributes' => array("class"=>'add-product'),
              'html' => FALSE
          ),
      );

   }
  }
}

/**
 * Implementation of hook_menu().
 */
function media_foundry_live_event_menu() {
  $items = array();
  $items['admin/config/media/live_event_settings'] = array(
      'title' => 'Live Streaming',
      'description' => 'Manage the live event wowza server settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_foundry_live_event_admin_settings'),
      'file' => 'media_foundry_live_event.admin.inc',
      'access arguments' => array(ACCESS_MEDIA_SETTINGS),
  );

  $items['admin/commerce/prepend-sku-code'] = array(
      'title' => 'SKU Code',
      'description' => 'Enter SKU Code to be prepended with original SKU during product creation',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_foundry_live_event_prepend_sku_code'),
      'file' => 'media_foundry_live_event.admin.inc',
      'access arguments' => array(ACCESS_MEDIA_SETTINGS),
  );

 $items['perform-video-requeue/%'] = array(
    'page callback' => 'media_foundry_perform_video_requeue',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['perform-bulk-video-requeue/%'] = array(
    'page callback' => 'media_foundry_perform_bulk_video_requeue',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
  * Implementation of Video Requeue
  */
function media_foundry_perform_video_requeue() {
  $reset_video = db_update('video_queue')
                          ->fields(
                              array(
                                    'status'    => 1,
                                    'duration'  => NULL,
                                    'started'   => 0,
                                    'completed' => 0
                                   )
                                  )
                          ->condition(' entity_id', arg(1), '=')
                          ->execute();

  if($reset_video == '1')
    drupal_set_message("Video has been successfully requeued for transcoding.", "success");
  else
    drupal_set_message("Video requeuing failed or the video is not yet transcoded. Please try again", "error");

  $urlAlias = drupal_get_path_alias('node/'.arg(1));
  drupal_goto($urlAlias);
}

/**
  * Implementation of Bulk Video Requeue
  */
function media_foundry_perform_bulk_video_requeue() {
  $video_ids = explode(',',arg(1));
  //echo '<pre>'; print_r($video_ids); exit;
   $reset_bulk_video = db_update('video_queue')
                          ->fields(
                              array(
                                    'status'    => 1,
                                    'duration'  => NULL,
                                    'started'   => 0,
                                    'completed' => 0
                                   )
                                  )
                          ->condition(' entity_id', $video_ids, 'IN')
                          ->execute();

  if($reset_bulk_video != '0')
    drupal_set_message("Selected videos are successfully requeued for transcoding.", "success");
  else
    drupal_set_message("Videos requeuing failed or the videos are not yet transcoded. Please try again", "error");

  drupal_goto('medialist');
}



/**
 * Implementation of hook_form_alter().
 */
function media_foundry_live_event_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    // dpm($form_id);
  	/*Code for redirection of user password page to home page*/
	if ($form_id=='user_pass') {
    $form['#submit'][] = '_password_recover_submit';
	}
	/*Code for redirection of user password page to home page Ends here*/

    if($form_id == "live_event_node_form") {
      if (!empty($form['nid']['#value'])) {
        // The nid is required for the delete confirmation form.
        $form['actions']['delete']['#limit_validation_errors'] = array(array('nid'));
      }
    $form['#validate'][] = 'media_foundry_live_event_scedule_date_validate';
    $allowed_roles = array('Publisher Admin', 'Publisher Editor','Publisher Contributor');
   	 if(count(array_intersect($user->roles, $allowed_roles)) > 0){
      $form['comment_settings']['#access'] = false;
      $form['revision_information']['#access'] = false;
      $form['domain']['domain_source']['#access'] = false;
      $form['author']['#access'] = false;
      $form['options']['#access'] = false;
      $form['comment_settings']['#access'] = false;

    }
    $form['body']['und'][0]['#format'] = 'plain_text';
    $form['options']['#title'] = t("Moderation");
    $form['options']['#weight'] = 0;
    $form['#after_build'][] = 'live_event_node_form_custom_after_build';
    $cancel_link = l( t('Cancel'), 'media/dashboard',
        array('attributes' => array(
            'class' => array('node-cancel'),),
        )
    );
    $form['actions']['#suffix'] =  $cancel_link;
    unset($form['actions']['preview']);
    unset($form['domain']['domains']['#options'][1]);
    $form['#submit'][0] = 'submit_default_domain';
    //$form['actions']['submit']['#submit'][] = 'media_foundry_live_event_submit';

  }
  if($form_id == "video_node_form") {
    /* Code for adding help text on upload video form for send to all affiliates */
    $form['domain']['domain_site']['#description'] = 'Select if this content can be shown to all affiliates. This setting will override the options below, but you must still select a domain that "owns" this content.<br>Please note: If this is selected, any new affiliate sites created will also inherit this content. For greater control over your media use the checkboxes below to manage content on a per affiliate basis';
    /* Code for adding help text on upload video form for send to all affiliates ENDS HERE */
    $form['media_flavor'] = array(
        '#type' => 'fieldset',
        '#title' => t('Media Flavor'),
        '#weight' => 5,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'additional_settings',
    );
    $form['media_flavor']['description'] = array(
        '#type' => 'item',
        '#title' => t(''),
        '#markup' => "No flavors has been created yet. Flavors will generate after video save",
    );

    if(arg(2) == "edit") {
        $vnid = arg(1);
        $media_flavor_block = get_video_media_flavor_list($vnid);
        $form['media_flavor']['description']['#markup'] = $media_flavor_block;
    }
    $form['body']['und'][0]['#format'] = 'plain_text';
    $allowed_roles = array('Publisher Admin', 'Publisher Editor','Publisher Contributor');
    if(count(array_intersect($user->roles, $allowed_roles)) > 0){
      $form['comment_settings']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
      $form['domain']['domain_source']['#access'] = FALSE;
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
      $form['comment_settings']['#access'] = FALSE;
    }
    if (in_array('Publisher Contributor', $user->roles)) {
      $form['options']['#access'] = FALSE;
    }
    $form['options']['#title'] = t("Moderation");
    $form['options']['#weight'] = 0;
    $cancel_link = l( t('Cancel'), 'media/dashboard',
        array('attributes' => array(
            'class' => array('node-cancel'),),
            )
    );
    $form['actions']['#suffix'] =  $cancel_link;
    $form['domain']['#title'] = t("Publish to Affiliate");
    unset($form['actions']['preview']);
    unset($form['domain']['domains']['#options'][1]);
    $form['#submit'][0] = 'submit_default_domain';
    $form['#after_build'][] = 'video_node_form_custom_after_build';
    // $form['actions']['submit']['#submit'][] = 'media_foundry_custom_video_submit';
    // $form['actions']['submit']['#submit'] = array_merge( array('media_foundry_custom_video_submit'),
	$form['actions']['submit']['#validate'][] = 'media_foundry_node_validation';
  }
  if($form_id == "commerce_product_ui_product_form") {
    //Hide View Based subscription type for now
    unset($form['field_subscription_type']['und']['#options'][2]);
    $pid = arg(5);
    $pnode = node_load($pid);

    if($pid && arg(3) == "add") {
      $form['field_premium_node']['und']['#default_value'] = $pid;
      $form['title']['#default_value'] = $pnode->title;
    }
    if($pnode->type!='video')
    {
      unset($form['field_subscription_type']['und']['#options'][22]);
      unset($form['field_subscription_type']['und']['#options'][2]);
    }
    $form['#validate'][] = 'media_foundry_custom_product_form_reference_validate';
    $form['actions']['submit']['#submit'][] = 'media_foundry_custom_product_form_reference_submit';
  }
  if($form_id == "comment_node_video_form") {

    $profile_pic = theme('user_picture', array('account' => $user));
    $form['author']['#prefix'] = "<div class='comment-author-pic'>".$profile_pic."</div>";
    //$form['comment_body']['#attributes']['placeholder'] = t( 'Leave Comment' );
   }
   if($form_id == "comment_node_live_event_form") {
     global $user;
     $profile_pic = theme('user_picture', array('account' => $user));
     $form['author']['#prefix'] = "<div class='comment-author-pic'>".$profile_pic."</div>";
     //$form['comment_body']['#attributes']['placeholder'] = t( 'Leave Comment' );

   }
   if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
      drupal_add_js(drupal_get_path('module', 'media_foundry_live_event'). '/js/media_foundry_live_event.js');
      $product_id = $form['product_id']['#value'];
      if(isset($product_id) && $product_id != "") {
       $getTime = "SELECT field_for_time_value FROM field_data_field_for_time WHERE entity_id = ".$product_id;
       $resultTime = db_query($getTime);
       $rowTime = $resultTime->fetchAssoc();
       $no_of_days = $rowTime['field_for_time_value'];
       $start_date = $form['line_item_fields']['field_start_date']['und'][0]['#default_value']['value'];
       if($no_of_days>0)
       {
         $no_of_days = $no_of_days-1;
         $end_date = date('Y-m-d', strtotime($start_date. ' + '.$no_of_days.' days'));
         $form['line_item_fields']['field_start_date']['und'][0]['#default_value']['value2'] = $end_date;
         $form['line_item_fields']['field_start_date']['#attributes']['onchange'] = 'return setenddate("'.$no_of_days.'")';
       }
      }
       //To validate Start date for Add To Cart form submit
       $form['#validate'][] = 'media_foundry_add_to_cart_form_validate';

       /***Code to hide Add To Cart button if customer has already subscribed the product***/
       global $user;
       // Code for Anonymous user

       if($user->uid==0)
       {
         unset($form['submit']);
         unset($form['line_item_fields']['field_start_date']);
       }
       else
       {
          //Code for Publisher users disallowing display of Add To Cart button
		  $allowed_roles = array('Publisher Admin', 'Publisher Editor','Publisher Contributor');
		  if(count(array_intersect($user->roles, $allowed_roles)) > 0){
		    unset($form['submit']);
            unset($form['line_item_fields']['field_start_date']);
	      }
       }

       if(!drupal_is_front_page() && $user->uid!=0 && $product_id!='')
       {
         /**Start To get all products from same Product Display**/
         $queryProds = "SELECT b.field_display_name_product_id from field_data_field_display_name a, field_data_field_display_name b  WHERE b.entity_id = a.entity_id and a.field_display_name_product_id =".$product_id;
         $resProds = db_query($queryProds);
         $rowsProds = $resProds->fetchAll();

          $prodIds = array();
          foreach($rowsProds as $rowsProd)
          {
            $prodIds[] = $rowsProd->field_display_name_product_id;
          }
          $prodIdsString = implode(',',$prodIds);
          ////End To get all products from same Product Display////

         $orders = commerce_order_load_multiple(array(), array('uid' => $user->uid));
         $lineIems = array();
         foreach($orders as $order)
         {
           $items = $order->commerce_line_items['und'];
           foreach($items as $item)
           {
             $lineIems[] = $item['line_item_id'];
           }
         }
         $lineItemsString = implode(',',$lineIems);

         if($lineItemsString!='')
         {
           //$query = "SELECT commerce_product_product_id, entity_id FROM `field_revision_commerce_product` where entity_id in (".$lineItemsString.") and commerce_product_product_id = ".$product_id;
           $query = "SELECT commerce_product_product_id, entity_id FROM `field_revision_commerce_product` where entity_id in (".$lineItemsString.") and commerce_product_product_id in (".$prodIdsString.")";
           $res = db_query($query);
           $rows = $res->fetchAssoc();

           if($rows['commerce_product_product_id']!='')
           {
             $queryType = "select field_subscription_type_tid from field_revision_field_subscription_type where entity_id in (".$prodIdsString.")";
             $resType = db_query($queryType);
             $rowsType = $resType->fetchAssoc();
             unset($form['submit']);
             unset($form['line_item_fields']['field_start_date']);

           }
         }
       }
   }

   if($form_id == "commerce_checkout_form_review") {
       $form['#submit'][] = 'commerce_checkout_update_order_status';
   }

   if($form_id == "publisher_node_form") {
     if ( in_array('Publisher Admin', $user->roles) ) {
         $form['field_publisher_id']['#access'] = FALSE;
     }
   }

   if($form_id == "views_form_commerce_cart_form_default") {
     unset($form['actions']['submit']);
   }
   if($form_id == "user_profile_form") {
   	$twitt_acc = $form['#user']->twitter_accounts;
   	unset($form['#validate'][1]);
	/*if(!empty($twitt_acc)) {
		if($twitt_acc[0]->id != "" || $form['#user']->init=="email address")
		{
		  unset($form['#validate']);
		}
	}*/
	if (in_array('Publisher Admin', $user->roles) ) {
		$form['account']['status']['#access'] = FALSE;
	}
   }

   if($form_id == "user_register_form"){
     if($user->uid !=1){
         unset($form['account']['roles']['#options'][3]);
     }
   }

   if ($form_id=='views_exposed_form') {
     unset($form['combine']);
   }
   if($form_id == "media_foundry_live_event_admin_settings") {
     $allowed_roles = array('Publisher Admin', 'Publisher Editor','Publisher Contributor');
     if(count(array_intersect($user->roles, $allowed_roles)) > 0){
       $form['http_live_app_address']['#access'] = false;
       $form['http_vod_app_address']['#access'] = false;
       $form['wowza_host_ip']['#access'] = false;
     }
    }
	if ($form_id == 'user_admin_account') {
        global $user;
        if(!in_array('administrator', $user->roles)) {
			$role_id = user_role_load_by_name('administrator')->rid;
            $result = db_query("select uid from {users_roles} where rid=" . $role_id); //rid=3 for administrators
            foreach($result as $temp) {
                unset($form['accounts']['#options'][$temp->uid]);
            }

        }
    }

}
function submit_default_domain(&$form, &$form_state)
{
  $form_state['values']['domains'][1] = 1;
}
/*Function to validate Start Date of video*/
function media_foundry_add_to_cart_form_validate(&$form, &$form_state)
{
  $now = strtotime(date("Y-m-d"));
  //echo "today...".$today = strtotime(date("Y-m-d"));
  $start_date = $form_state['line_item']->field_start_date['und'][0]['value'];
  if($now > strtotime($start_date)) {
    form_set_error('commerce_cart_add_to_cart_form', t('Please select start date greater than current date'));
  }
}
function commerce_checkout_update_order_status(&$form, &$form_state) {
      //dpm($form_state['values']);
      $selTrasStatus = "SELECT status FROM commerce_payment_transaction WHERE order_id = 11";
      $resultTrasStatus = db_query($selTrasStatus);
      $rowTrasStatus = $resultTrasStatus->fetchAssoc();
      //dpm($rowTrasStatus);
}
function media_foundry_custom_product_form_reference_validate(&$form, &$form_state) {
  //Not allowing user to add another One Time subscription for the same content
  $tid = $form_state['commerce_product']->field_subscription_type['und'][0]['tid'];
  if($tid=='12')
  {
    $nid = $form_state['commerce_product']->field_premium_node['und'][0]['nid'];
    $selProductDisplay = "SELECT s.entity_id
                          FROM `field_data_field_subscription_type` s
                          LEFT JOIN `field_data_field_premium_node` p
                          ON s.entity_id = p.entity_id
                          WHERE p.field_premium_node_nid = ".$nid." AND s.field_subscription_type_tid =".$tid;
    $resultProductDisplay = db_query($selProductDisplay);
    $rowProductDisplay = $resultProductDisplay->fetchAssoc();
    $event_display_nid = $rowProductDisplay['entity_id'];
    if($event_display_nid!='')
    {
      form_set_error('commerce_pdm_product_display_title', t('There is already a One Time Subscription for the same content.'));
    }
  }
    if(count($form_state['input']['quick_reference']) < 3) {
      form_set_error('commerce_pdm_product_display_title', t('Please add the event display node for product'));
    }
    else {
      $del_cnt = 0; $not_del = 0;
      foreach ($form_state['input']['quick_reference'] as $key => $element) {
        if(is_numeric($key)) {
            if ($element['deleted']) {
              $del_cnt++;
            }
            else {
              $not_del++;
            }
        }
     }
     if($not_del < 1) {
       form_set_error('commerce_pdm_product_display_title', t('Please add atleast one event display for the product'));
     }
    }
}
/*Function to add category to Product display*/
function media_foundry_custom_product_form_reference_submit($form, &$form_state)
{
  $contentNode = node_load($form['field_premium_node']['und']['#value']);

  $contentCategoryTid = $contentNode->field_category['und'][0]['tid'];
  $product_id = $form_state['build_info']['args'][0]->product_id;

  $selProductDisplay = "SELECT entity_id FROM field_data_field_display_name WHERE field_display_name_product_id =".$product_id;
  $resultProductDisplay = db_query($selProductDisplay);
  $rowProductDisplay = $resultProductDisplay->fetchAssoc();
  $event_display_nid = $rowProductDisplay['entity_id'];
  $event_node = node_load($event_display_nid);
  $event_node->field_category['und'][0]['tid'] = $contentCategoryTid;


  //it is custom code to display the Display Product on all the domains('use active domains field'
  $event_node->domains = $contentNode->domains;
  $event_node->domain_source = $contentNode->domain_source;
  node_save($event_node);
}
function video_node_form_custom_after_build($form, &$form_state) {
    /*$form['path']['#access'] = FALSE;
    $form['scheduler_settings']['#title'] = t('Schedule');
    $form['scheduler_settings']['#weight'] = 1;*/
    $form['menu']['#access'] = FALSE;
    return ($form);
}

function live_event_node_form_custom_after_build($form, &$form_state) {
   $form['path']['#access'] = FALSE;

  $form['scheduler_settings']['#title'] = t('Schedule');
   $form['scheduler_settings']['publish_on']['date']['#title'] = 'Start Date';
   $form['scheduler_settings']['unpublish_on']['date']['#title'] = 'End Date';
   $form['scheduler_settings']['publish_on']['time']['#title'] = 'Start Time';
   $form['scheduler_settings']['unpublish_on']['time']['#title'] = 'End Time';


   $form['field_schedule_from']['und'][0]['value']['date']['#title'] = "Start date";
   $form['field_schedule_from']['und'][0]['value']['time']['#title'] = "Start time";
   $form['field_schedule_from']['und'][0]['value2']['date']['#title'] = "End date";
   $form['field_schedule_from']['und'][0]['value2']['time']['#title'] = "End time";


   $form['scheduler_settings']['#weight'] = 1;
  $form['menu']['#access'] = FALSE;
  return ($form);
}
/* function media_foundry_custom_video_submit($form, &$form_state) {
    if($form['field_add_to_subscription']['und']['#value'] == 2) {
     unset($_REQUEST['destination']); // this doesn't seem to work though
     unset($form['#redirect']);
     unset($form_state['redirect']);
     $form_state['redirect'] = "admin/commerce/products/add/product/".$form_state['nid'];
   }
   else {
     $form_state['redirect'] = "media/dashboard";
   }
}

function media_foundry_live_event_submit($form, &$form_state) {
  if($form['field_add_to_subscription']['und']['#value'] == 2) {
    dpm($form_state['redirect']);
    unset($_REQUEST['destination']); // this doesn't seem to work though

    unset($form['#redirect']);
    unset($form_state['redirect']);
    dpm($form_state['redirect']);
    $form_state['redirect'] = "admin/commerce/products/add/product/".$form_state['nid'];
  }
  else {
   $form_state['redirect'] = 'media/dashboard';
  }
}
*/
function media_foundry_live_event_scedule_date_validate($form, &$form_state) {

      $formdate = strtotime($form['field_schedule_from']['und'][0]['#value']['value']['date']." ".$form['field_schedule_from']['und'][0]['#value']['value']['time']);
      $todate = strtotime($form['field_schedule_from']['und'][0]['#value']['value2']['date']." ".$form['field_schedule_from']['und'][0]['#value']['value2']['time']);
      $event_duration = $todate - $formdate;
      $daytime = 24 * 60 * 60;
      $currtime = time();
	  if(arg(2) != "edit") {
		  if($formdate < $currtime ) {
			  form_set_error("field_schedule_from", "Event start date & time must be greater than current date & time");
		  }
		  if($formdate > $todate ) {
			form_set_error("field_schedule_from", "Event end date & time must be greater than start date & time");
		  }
		  $node_type = $form['type']['#value'];
	      $node_title = $form['title']['#value'];
	      media_foundry_prevent_duplicate_node_title($node_type, $node_title);
      }

}

/**
 * Implements hook_block_info().
 */
function media_foundry_live_event_block_info() {
  $blocks = array();
  $blocks['dashboard_add_content_link'] = array(
      'info' => t('Publisher dashbaord add content link'),
  );
  return $blocks;
}
/*

 */

/**
 * Implements hook_block_view().
 */
function media_foundry_live_event_block_view($delta='') {
  $block = array();
   switch($delta) {
    case 'dashboard_add_content_link' :
      $block['content'] = publisher_dashboard_content_add_link();
      break;
    }

  return $block;
}


function publisher_dashboard_content_add_link() {
 global $base_url;
  $image_path = $base_url."/".drupal_get_path("module", "media_foundry_live_event");
  $item = array();
  /* $items[][] = l('<img src="'.$image_path.'/images/uploadvideo.png"/>', 'node/add/video',
                    array('attributes' => array(
                              'class' => array('upload-video'),),
                         )
                ); */
  $items[][] = "<a class='upload-video' href='".$base_url."/node/add/video'><img src='".$image_path."/images/uploadvideo.png'/></a>";
  $items[][] = "<a class='create-live-events' href='".$base_url."/node/add/live-event'><img src='".$image_path."/images/createliveevent.png'/></a>";
  $items[][] = "<a class='create-playlist' href='".$base_url."/node/add/blog'><img src='".$image_path."/images/createplaylist.png'/></a>";

  $dashboard_links = theme('item_list', array('items' => $items));
  return $dashboard_links;
}
function get_video_media_flavor_list($vnid) {
  $tb_header = array(
         	    array('data' => t('Flavor Name')),
         	    array('data' => t('File Format')),
                array('data' => t('Size')),
                array('data' => t('Dimension')),
               // array('data' => t('Action')),
                array('data' => t('Download')),
            );


  $sql = "SELECT field_upload_video_fid FROM field_data_field_upload_video WHERE entity_id = :etid";
  $result = db_query($sql, array(':etid' => $vnid));
  $row = $result->fetchAssoc();
  $original_video_fid = $row['field_upload_video_fid'];
  $presets = variable_get("video_preset");
  $sql_vf = "SELECT fid, uid, filename, uri, filemime, filesize, status, timestamp FROM file_managed FM left join video_output VO on FM.fid = VO.output_fid where original_fid = :ofid";
  $result_vf = db_query($sql_vf, array(':ofid' => $original_video_fid));
  while ($row_vf = $result_vf->fetchAssoc()) {
          $delete_link = l( t('Delete'), '#',
          array('attributes' => array(
          'class' => array('delete-flavor'),),
          'query' => drupal_get_destination(),)
          );

          foreach($presets as $preset) {
            if (strpos($row_vf['filename'],strtolower($preset)) !== false) {
                $preset_name = $preset;
                $pstr = explode("MP4_",$preset_name);
                $preset_dimention = $pstr[1];

            }
          }
          $url = file_create_url($row_vf['uri']);
          $url = parse_url($url);
          $path = $url['path'];
          $dlink = '<a href="'.$path.'" download="">Download</a>';
          $download_link = theme('file_link', array('file' => file_load($row_vf['fid'])));
		  $rows[] = array(
                        array('data' => $preset_name),
          	       	    array('data' => $row_vf['filemime']),
          	      	    array('data' => round($row_vf['filesize'] / (1024 * 1024),2). "MB"),
        			    array('data' => $preset_dimention),
        			  //  array('data' => $delete_link),
        			    array('data' => $dlink),
      	              );
		}
  return theme('table', array('header' => $tb_header, 'rows'=> $rows));
}

function media_foundry_live_event_node_access($node, $op, $account) {
  global $user;
   if (is_object($node)) {
  $bool = (($node->type == 'video') && ($op == 'view'));
    if ($bool) {
      // Implements code to restrict video access in Publisher domain for anonymous user
       $_domain = domain_get_domain();
	   if($_domain['domain_id'] == 1 && $user->uid == 0) {
	     drupal_set_message("Please login to view the video page");
	     drupal_goto("<front>");
       }
       if($node->field_add_to_subscription['und'][0]['value'] == 2) {
	      $currode = $node->nid;
		  $getAuthUser = "SELECT line_item_id, O.order_id, P.commerce_product_product_id, field_premium_node_nid,
          field_start_date_value, field_start_date_value2
          FROM commerce_order O left join commerce_line_item L on O.order_id = L.order_id
          left join field_data_commerce_product P on P.entity_id = L.line_item_id
          left join field_data_field_premium_node N on N.entity_id = P.commerce_product_product_id
          left join field_data_field_start_date D on D.entity_id = L.line_item_id
          left join commerce_order_revision R on O.order_id = R.order_id
          left join field_data_field_subscription_type T on P.entity_id = T.entity_id
          where R.status = 'completed' and field_subscription_type_tid = 19 and O.uid = ". $account->uid ." and N.field_premium_node_nid = ".$currode;
          $resultAuthuser = db_query($getAuthUser);
          while ($rowAuthuser = $resultAuthuser->fetchAssoc()) {

            $start_date = strtotime($rowAuthuser['field_start_date_value']);
            $end_date = strtotime($rowAuthuser['field_start_date_value2']);
            $currtime = time();
            if($node->nid == $rowAuthuser['field_premium_node_nid'] && ($currtime > $start_date && $currtime < $end_date )) {
              return NODE_ACCESS_ALLOW;
            }
            else {
              return NODE_ACCESS_DENY;
            }
          }
      }
    }
  }
  $bool = (($node->type == 'live_event') && ($op == 'view'));
  if ($bool) {
    // Implements code to restrict live event access in Publisher domain for anonymous user
    $_domain = domain_get_domain();
    if($_domain['domain_id'] == 1 && $user->uid == 0) {
      drupal_set_message("Please login to view the live event page");
      drupal_goto("<front>");
    }
  }
  return NODE_ACCESS_IGNORE;
}
function media_foundry_node_validation($form, &$form_state) {
    if(arg(2) != "edit") {
		$node_type = $form['type']['#value'];
		$node_title = $form['title']['#value'];
		media_foundry_prevent_duplicate_node_title($node_type, $node_title);
	}
}
function media_foundry_prevent_duplicate_node_title($node_type, $node_title){

    $type = $node_type;
    $query = db_select('node', 'n');
    $node_title_exists =  $query->fields('n', array('nid'))
      ->condition('n.type', $type, '=')
      ->condition('n.title', $node_title, '=')
      ->execute()
      ->fetchField();
    if ($node_title_exists) {
      form_set_error('title', t('You are adding duplicate content title'));
    }

}
/****Redirect User to dashboard after Login*****/
function  media_foundry_live_event_user_login(&$edit, $account)
{
  global $base_url;
 $domainId = domain_get_domain();
 if($domainId['is_default'])
 {
  if ( in_array('administrator', $account->roles) ||
       in_array('publisher admin', $account->roles) ||
       in_array('publisher editor', $account->roles) ||
       in_array('publisher contributor', $account->roles)
     )
  {
    $_GET['destination'] = $base_url.'media/dashboard';
  }
 }
}