<?php

/**
 * @file
 * This file contains no working PHP code; it exists to provide additional
 * documentation for doxygen as well as to document hooks in the standard
 * Drupal manner.
 */


/**
 * @defgroup restws RestWS module integrations.
 *
 * Module integrations with the restws module.
 */

/**
 * @defgroup restws_hooks RestWS' hooks
 * @{
 * Hooks that can be implemented by other modules in order to extend restws.
 */

/**
 * Define restws compatible resources.
 *
 * This hook is required in order to add new restws resources.
 *
 * @return array
 *   An array of information about the module's provided resources.
 *   The array contains a sub-array for each resource, with the resource name as
 *   the key. Resource names may only contain lowercase alpha-numeric characters
 *   and underscores and should be prefixed with the providing module name.
 *   Possible attributes for each sub-array are:
 *   - label: The label of the resource. Start capitalized.
 *   - class: The name of the controller class for the resource. The class has
 *     to implement the RestWSResourceControllerInterface. Required.
 *   - menu_path: A relative path were the resource callback should lie. By
 *     default the resource name will be used as menu path. Optional.
 *
 * @see UserResourceController
 */
function custom_node_restws_resource_info() {
    watchdog('inside','custom_node_restws_resource_info');
    return array(
      'node' => array(
        'label' => t('Node'),
       // 'class' => 'CustomNodeResourceController',
        'menu_path' => 'api/mediaList',
      ),
        'user' => array(
           'label' => t('User'),
          // 'class' => 'CustomNodeResourceController',
           'menu_path' => 'api/userList',
         ),
    ); 
  
}
function custom_node_restws_resource_info_alter(&$resource_info) {
 //$resource_info['node']['class'] = 'CustomNodeResourceController';
 $resource_info['node']['menu_path'] = 'api/mediaList';
$resource_info['user']['menu_path'] = 'api/userList';
}

/**
 * Define restws compatible formats.
 *
 * This hook is required in order to add new restws formats.
 *
 * @return array
 *   An array of information about the module's provided formats.
 *   The array contains a sub-array for each format, with the format name as
 *   the key. Format names may only contain lowercase alpha-numeric characters
 *   and underscores.
 *   Possible attributes for each sub-array are:
 *   - label: The label of the format. Start capitalized.
 *   - class: The name of the class for the format. The class has to implement
 *     the RestWSFormatInterface. Required.
 *   - mime type: The official internet media type (MIME type) of the format.
 *     Required.
 */
/**/
/*function custom_node_restws_format_info() {
     watchdog('inside','custom_node_restws_format_info');
  return array(
    'json' => array(
      'label' => t('JSON'),
      'class' => 'RestWSFormatJSON',
      'mime type' => 'application/json',
    ),
    'xml' => array(
      'label' => t('XML'),
      'class' => 'RestWSFormatXML',
      'mime type' => 'application/xml',
    ),
  );
}*/

/**
 * Alter available format information.
 *
 * @param array $format_info
 *   Format information as defined in custom_node_restws_format_info()
 *
 * @see custom_node_restws_format_info()
 */
/*function custom_node_restws_format_info_alter(&$format_info) {
  $format_info['json']['class'] = 'MyJsonFormatHandler';
}*/

/**
 * Alter the incoming request array.
 *
 * @param array $request
 *   A request array that contains the following items:
 *   - op: operation string, one of create, read, update or delete.
 *   - format: object implementing RestWSFormatInterface.
 *   - resource: object implementing RestWSResourceControllerInterface.
 *   - id: resource identifier or NULL for the create operation.
 *   - payload: array containing data attached to this request, if any.
 */
function custom_node_restws_request_alter(array &$request) {
   
 if($request['op']=='query')
 {
  $log = new CustomNodeResourceController();
  $log->read();
 }
    watchdog('inside','custom_node_restws_request_alter');
  if ($request['resource']->resource() == 'node') {
    $request['format'] = restws_format('json');
  }
}

/**
 * Alter the outgoing response.
 *
 * @param mixed $response
 *   The response data being returned by the REST service (not yet serialized).
 *
 * @param string $function
 *   The function being called on the REST service.
 *
 * @param string $format
 *   The name of the format serializing the response.
 */
function custom_node_restws_response_alter(&$response, $function, $formatName) {
    watchdog('inside','custom_node_restws_response_alter');
    
    $responseKeys = $newResponse = array();
    $listType = NULL;
    //print_r($response);exit;
    
    $requestType = arg(1);
    switch($val){
        case 'mediaList': case 'mediaList.json':
                $replaceWith = array(
              'nid' => 'id', 
              'type' => 'mediaType', 
              'title' => 'contentTitle', 
              'comment' => 'commentCount', 
              'is_new' => 'featured',
              'self' => 'currentPage',
              'first' => 'firstPage',
              'next' => 'nextPage',
              'last' => 'lastPage',
              'list' => 'totalMediaCount'
              );
            $listType = 'mediaDetails';
            break;
        case 'userList':case 'userList.json':
                $replaceWith = array(
              'uid' => 'userId', 
              'name' => 'name', 
              'mail' => 'email', 
              'field_first_name' => 'firstName', 
              'field_last_name' => 'lastName',
                'field_organization' => 'organization',
                'field_phone' => 'phone',
                'field_address' => 'address',
                'field_address_2_' => 'address2',
                 'field_city' => 'city',
                 'field_state' => 'state',
                 'field_zip' => 'zip',
                 'field_country' => 'country',
                    'picture' => 'userProfilePic',
              'self' => 'currentPage',
              'first' => 'firstPage',
              'next' => 'nextPage',
              'last' => 'lastPage',
              'list' => 'totalUserCount'
              );
            $listType = 'userDetails';
            break;
        default:
            break;
    }
 
   // var_dump((!empty($listType) && is_array($response) && count($response)));exit;
    if(!empty($listType) && is_array($response) && count($response)){       
        watchdog('if', 'change_response');
       //  $response = change_response($response, $replaceWith, $listType);
    }

   // print_r($response); exit;
    
  if ($function == 'viewResource' && $formatName == 'json') {
    $response['site_name'] = variable_get('site_name', '');
  }
}

function change_response(&$response, $replaceWith, $listType)
{
    watchdog('inside', 'change_response');
     if(array_key_exists('list', $response)){
             // multiple response
              $responseKeys = array_merge(array_keys($response), array_keys($response['list'][0]));
              
              foreach($response as $key => $listRecords){
                // echo $key.' => '.$value.'<br />';
                
                 if(array_key_exists($key, $replaceWith)){
                    
                     if(!is_array($listRecords)){
                        $newResponse[$replaceWith[$key]] = $response[$key];
                       
                     }elseif($key == 'list' && is_array($listRecords)){
                        //$newResponse['totalMediaCount'] = count($listRecords);
                        
                       
                        $recordList = array();
                          $i = 0;
                       foreach($listRecords as $singleRecords){
                        if(isset($singleRecords['body'])) {
                            unset($singleRecords['body']);
                        }
                           foreach($singleRecords as $singleKey => $singleValue){
                               //echo $singleKey.' ';
                              if(array_key_exists($singleKey, $replaceWith)){
                                   $recordList[$i][$replaceWith[$singleKey]] = $singleValue;
                               }
                            }
                          //  print_r($singleRecords);
                        $i++;
                          }
                            $newResponse[$listType] = $recordList;
                     }
                     unset($response[$key]);
                }
              }
            //  exit;
              
           
            
        }else{
            // single array
            $responseKeys = array_keys($response);
            
             foreach($responseKeys as $key){
               
                if(array_key_exists($key, $replaceWith)){
                    $newResponse[$replaceWith[$key]] = $response[$key];
                }
                unset($response[$key]);

            }
         }
         $newResponse['status'] = 'SUCCESS';
         $response = $newResponse;
         return $response;
}
class CustomNodeResourceController implements RestWSResourceControllerInterface {
  /**
   * @see custom_node_entity_property_info()
   * @see RestWSResourceControllerInterface::propertyInfo()
*/
  public function propertyInfo() {
        watchdog('inside','propertyInfo');
    return array(
      'properties' => array(
        'title' => array(
          'type' => 'text',
          'label' => t('Title'),
          'setter callback' => 'entity_property_verbatim_set',
        )
      ),
    );
  }


  
  /**
   * @see RestWSResourceControllerInterface::wrapper()
 */
 public function wrapper($id=0) {

    watchdog('inside','wrapper');
    $node = node_load($id);
    $info = $this->propertyInfo();
   // var_dump(entity_metadata_wrapper('node', $node, array('property info' => $info['properties'])));exit;
    return entity_metadata_wrapper('node', $node, array('property info' => $info['properties']));
  } 
  /**
   * @see RestWSResourceControllerInterface::create()
   */
  public function create(array $values) {
    watchdog('inside','create');

  }

  /**
   * @see RestWSResourceControllerInterface::read()
   */
  public function read($id=null) {
  
    watchdog('inside','read');
    
    return $id;
  }

  /**
   * @see RestWSResourceControllerInterface::update()
   */
  public function update($id, array $values) {

    watchdog('inside','update');

  }

  /**
   * @see RestWSResourceControllerInterface::delete()
   */
  public function delete($id) {

  }

  /**
   * @see RestWSResourceControllerInterface::access()
   */
  public function access($op, $id) {
  //  var_dump($op);exit;
    watchdog('inside','access');
    return $op;
  }

  /**
   * @see RestWSResourceControllerInterface::resource()
   */
  public function resource() {
         
    watchdog('inside','resource');
    $resourceType = arg(0);
   // var_dump($funct);exit;
    return 'node';
  }
}